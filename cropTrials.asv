% Script to load c3d files and insert heel strike event. Then crop the
% trial based on the heel strike
clear;
clc;

%% Select one of the c3d files in the folder
[fname, pname] = uigetfile('*.c3d', 'Select c3d file');

% Set folder as that chosen above
c3dFile_folder = pname;
c3dFiles=dir([c3dFile_folder,'\*.c3d']);

% Make current folder same as above
cd(pname);

%% Loop through all of the trials
for t_trial = 1:length(c3dFiles)
     
     % Load the c3d file using btk
     c3dFile_name = c3dFiles(t_trial,1).name;
     acqLS = btkReadAcquisition([c3dFile_folder '\' c3dFile_name]);
     data = btk_loadc3d([c3dFile_folder '\' c3dFile_name]);
     
     % Check if events are in the file
     [events, eventsInfo] = btkGetEvents(acqLS);
     if isempty(fieldnames(events)) == 0
          disp('Events already exist in this file')
     else
          % If not, first find when heel strike is occurring
          [rightHS, leftHS] = findHeelStrike(data);
     end
     
     
     % I want to create a cloned acquisition, then extract each gait cycle
     % and create a new c3d file of that cropped acquisition
     
     %First ensure that the rightHS corresponds with first actual right HS
     %in trial
     addFrames = btkGetFirstFrame(acqLS);
     rightHS = rightHS + addFrames +3;
     
     % Right side data first
     for ii = 1:length(rightHS)-1
          % Clone acquisition
          acq_newLS = btkCloneAcquisition(acqLS);
          % Insert new events into clone
          insertGaitEvents(acq_newLS, rightHS, leftHS)
          
          % Check if events were actually appended
          [times, labels, descriptions, ids] = btkGetEventsValues(acq_newLS);
          if isempty(times)
               uiwait(msgbox('Warning: Events do not exist'));
          else
               % Crop the new acquisition based on time between heel strikes
               numFrames = rightHS(ii+1,:) - rightHS(ii,:);
               btkCropAcquisition(acq_newLS, rightHS(ii), numFrames);
               
               % Write the new acquisition
               filename = [c3dFile_name(:,1:14), num2str(ii), '.c3d'];
               btkWriteAcquisition(acq_newLS, filename);
          end
     end
     
     % Assign force to the feet and generate the .trc and .mot files
     for croppedTrials = 1:length(rightHS)-1
          %Load the new acquisition
          fileName = [fname(:,1:14), num2str(croppedTrials),'.c3d'];
          data1 = btk_loadc3d([pname, fileName], 5);
          %Choose force plate filter frequency
          data1.FilterFreq = 30;
          %Assign forces to a foot
          data1 = assign_forces(data1,{'RCAL','LCAL'},{'calcn_r','calcn_l'},[20, 0.25],data1.FilterFreq);
          %Create the .trc and .mot files
          dataFinal = btk_c3d2trc_treadmill(data1,'off');
     end
     cd ../
end

%% Run IK
% Modify the files so they are appropriate for my acquisition
clear;
clc;

%% Processing Configuration

[inputDir, model_file]=processingConfiguration();

[filename, pathname] = uigetfile([TemplatePath '*.xml'], 'Select IK template');

IKTemplateXml = [pathname filename]; 

%% Select one of the trc files in the folder
[fname, pname] = uigetfile('*.trc', 'Select trc file');

% Set folder as that chosen above
trcFile_folder = pname;
trcFiles=dir([trcFile_folder,'\*.trc']);

     % Load the trc file using btk
     trcFile_name = trcFiles(t_trial,1).name;
     acqLS = btkReadAcquisition([trcFile_folder '\' trcFile_name]);
     data = btk_loadc3d([trcFile_folder '\' trcFile_name]);
     
     setup_InverseKinematics('data',data,'ModelFile',ModelFile,...
          'IKTasksFile',IKTasksFile,'Accuracy',0.00002, 'ReportMarkerLocations', true, 'ReportErrors', true);
     
     % run the ik tool from the command line
     com = ['ik -S ' trcFile_name '_Setup_InverseKinematics.xml'];
     system(com);
  
%% Run ID

% prepare for inverse dynamics
MOTFile = ['C:\Users\s2921887\Documents\Load Sharing Main Data Collection\ElaboratedData\Subject 6\2015-08-17\IK\IK Results'];
GRFFile = [data.TRC_Filename(1:end-4) '_grf.mot'];
GRFFileXML = [data.TRC_Filename(1:end-4) '_grf.xml'];

% create the grf xml file that defines the force assignments
grf2xml(data,'ExternalLoadNames',data.AssignForce.ExForce,'AppliedToBodies',data.AssignForce.ApBodies,...
     'GRFFile',GRFFile,'MOTFile',MOTFile,'LowPassFilterForKinematics',data.FilterFreq,...
     'OutputFile',GRFFileXML);

% make setup file for inverse dynamics
setup_InverseDynamics('data',data, 'ModelFile',ModelFile,'MOTFile',MOTFile,...
     'GRFFile',GRFFileXML,'LowPassFilterForKinematics',data.FilterFreq);

% call ID tool from the command line using setup file - i.e. run ID
com = ['id -S ' data.Name '_Setup_InverseDynamics.xml'];
system(com);

%% load data from the created mot/sto files from various analysis and put
% into a matlab structure

% load the data from MOT file and tie kinematic data to data structure
D = load_sto_file([data.TRC_Filename(1:end-4) '_ik.mot']);
data.Output.Kinematics = D;

clear D
D = load_sto_file(GRFFile);
data.Output.GRF = D;

clear D
% load the data from ID MOT file and tie kinetic data to data structure
D = load_sto_file([MOTFile(1:end-4) '_id.sto']);
data.Output.Kinetics = D;


