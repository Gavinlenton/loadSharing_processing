{
    "collab_server" : "",
    "contents" : "# Basic data analysis for ROM data\n # Clear workspace\nrm(list = ls())\n # ctrl + l to clear the screen\n\n# set working directory\nsetwd(\"~/Google Drive/LS_main_data_collection/ElaboratedData/ROM/\")\n\n# Load files\nhip_flexion_ROM <- read.csv(\"hip_flexion_ROM.csv\", header = TRUE, sep = \",\", na.strings = \"NaN\")\nshoulder_FF_ROM <- read.csv(\"shoulder_FF_ROM.csv\", header = TRUE, sep = \",\", na.strings = \"NaN\")\nUUA_ROM <- read.csv(\"UUA_ROM.csv\", header = TRUE, sep = \",\", na.strings = \"NaN\")\ntrunk_flexion_ROM <- read.csv(\"trunk_flexion_ROM.csv\", header = TRUE, sep = \",\", na.strings = \"NaN\")\n\n\n# Initial data checks -----------------------------------------------------\n\n\n# Check all variables for outliers\nsummary(hip_flexion_ROM)\nsummary(trunk_flexion_ROM)\nsummary(shoulder_FF_ROM)\nsummary(UUA_ROM)\n\n# Convert super low values to NA\nhip_flexion_ROM[,2:14][hip_flexion_ROM[,2:14] < 55] <- NA\nshoulder_FF_ROM[,2:14][shoulder_FF_ROM[,2:14] < 90] <- NA\nUUA_ROM[,2:14][UUA_ROM[,2:14] < 90] <- NA\ntrunk_flexion_ROM[,2:14][trunk_flexion_ROM[,2:14] < 70] <- NA\n\n# Omit NAs listwise\nhip_flexion_ROM <- na.omit(hip_flexion_ROM)\ntrunk_flexion_ROM <- na.omit(trunk_flexion_ROM)\nshoulder_FF_ROM <- na.omit(shoulder_FF_ROM)\nUUA_ROM <- na.omit(UUA_ROM)\n\n# Load libraries for ANOVA\nlibrary(mosaic)\nlibrary(pastecs)\nlibrary(ez)\nlibrary(reshape2)\n\n# Repeated measure ANOVA --------------------------------------------------\n\n# Reshape the data for repeated measures ANOVA\nhip_flexion_ROM.l = melt(hip_flexion_ROM, \n                         \"Participants\", \n                         measure.vars = c(\"TBAS15\", \"CRYE15\", \"TYR15\", \"USMC15\", \"CORE15\", \"SORD15\", \n                                          \"TBAS30\", \"CRYE30\", \"TYR30\", \"USMC30\", \"CORE30\", \"SORD30\"), \n                         variable.name = \"Armour\", \n                         value.name = \"hip_flex_ROM\")\n\nUUA_ROM.l = melt(UUA_ROM, \n                 \"Participants\", \n                 measure.vars = c(\"TBAS15\", \"CRYE15\", \"TYR15\", \"USMC15\", \"CORE15\", \"SORD15\",\n                                  \"TBAS30\", \"CRYE30\", \"TYR30\", \"USMC30\", \"CORE30\", \"SORD30\"), \n                 variable.name = \"Armour\", \n                 value.name = \"UUA_ROM\")\n\nshoulder_FF_ROM.l = melt(shoulder_FF_ROM, \n                 \"Participants\", \n                 measure.vars = c(\"TBAS15\", \"CRYE15\", \"TYR15\", \"USMC15\", \"CORE15\", \"SORD15\",\n                                  \"TBAS30\", \"CRYE30\", \"TYR30\", \"USMC30\", \"CORE30\", \"SORD30\"), \n                 variable.name = \"Armour\", \n                 value.name = \"shoulder_FF_ROM\")\n\ntrunk_flexion_ROM.l = melt(trunk_flexion_ROM, \n                         \"Participants\", \n                         measure.vars = c(\"TBAS15\", \"CRYE15\", \"TYR15\", \"USMC15\", \"CORE15\", \"SORD15\",\n                                          \"TBAS30\", \"CRYE30\", \"TYR30\", \"USMC30\", \"CORE30\", \"SORD30\"), \n                         variable.name = \"Armour\", \n                         value.name = \"trunk_flex_ROM\")\n\n# Add mass and armour type columns\nhip_flexion_ROM.l$Mass = gl(2, 102, labels = c(\"15\", \"30\"))\nhip_flexion_ROM.l$Armour_type = gl(6, 17, 204, labels = c(\"TBAS\", \"cARM1\", \"cARM2\", \"pARM1\", \"pARM2\", \"pARM3\"))\n\nUUA_ROM.l$Mass = gl(2, 120, labels = c(\"15\", \"30\"))\nUUA_ROM.l$Armour_type = gl(6, 20, 240, labels = c(\"TBAS\", \"cARM1\", \"cARM2\", \"pARM1\", \"pARM2\", \"pARM3\"))\n\nshoulder_FF_ROM.l$Mass = gl(2, 108, labels = c(\"15\", \"30\"))\nshoulder_FF_ROM.l$Armour_type = gl(6, 18, 216, labels = c(\"TBAS\", \"cARM1\", \"cARM2\", \"pARM1\", \"pARM2\", \"pARM3\"))\n\ntrunk_flexion_ROM.l$Mass = gl(2, 114, labels = c(\"15\", \"30\"))\ntrunk_flexion_ROM.l$Armour_type = gl(6, 19, 228, labels = c(\"TBAS\", \"cARM1\", \"cARM2\", \"pARM1\", \"pARM2\", \"pARM3\"))\n\n# Run the ANOVA\n# Hip flexion\nmodel_hip_flex = ezANOVA(data = hip_flexion_ROM.l, \n                         dv = hip_flex_ROM, \n                         wid = Participants, \n                         within = .(Armour_type, Mass), \n                         detailed = TRUE, \n                         type = 3, \n                         return_aov = TRUE)\n\n# UUA\nmodel_UUA = ezANOVA(data = UUA_ROM.l, \n                         dv = UUA_ROM, \n                         wid = Participants, \n                         within = .(Armour_type, Mass), \n                         detailed = TRUE, \n                         type = 3, \n                         return_aov = TRUE)\n\n# Shoulder forward flexion\nmodel_shoulder_FF= ezANOVA(data = shoulder_FF_ROM.l, \n                    dv = shoulder_FF_ROM, \n                    wid = Participants, \n                    within = .(Armour_type, Mass), \n                    detailed = TRUE, \n                    type = 3, \n                    return_aov = TRUE)\n\n# Trunk flexion\nmodel_trunk_flex = ezANOVA(data = trunk_flexion_ROM.l, \n                    dv = trunk_flex_ROM, \n                    wid = Participants, \n                    within = .(Armour_type, Mass), \n                    detailed = TRUE, \n                    type = 3, \n                    return_aov = TRUE)\n\n# Post hoc tests\n\n\n# Post hoc hip flexion ----------------------------------------------------\n\n\n# Bonferroni for armour type\npairwise.t.test(hip_flexion_ROM.l$hip_flex_ROM,\n                hip_flexion_ROM.l$Armour_type,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\n# Bonferroni for mass\npairwise.t.test(hip_flexion_ROM.l$hip_flex_ROM,\n                hip_flexion_ROM.l$Mass,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\n# Interaction simple effects analysis\n# Divide the data into mass levels\nhip_flexion_15 = subset(hip_flexion_ROM.l, Mass == \"15\")\nhip_flexion_30 = subset(hip_flexion_ROM.l, Mass == \"30\")\n\n# Bonferroni for armour type\npairwise.t.test(hip_flexion_15$hip_flex_ROM,\n                hip_flexion_15$Armour_type,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\npairwise.t.test(hip_flexion_30$hip_flex_ROM,\n                hip_flexion_30$Armour_type,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\n\n# Post hoc trunk flexion --------------------------------------------------\n\n\n# Bonferroni for armour type\npairwise.t.test(trunk_flexion_ROM.l$trunk_flex_ROM,\n                trunk_flexion_ROM.l$Armour_type,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\n# Bonferroni for mass\npairwise.t.test(trunk_flexion_ROM.l$trunk_flex_ROM,\n                trunk_flexion_ROM.l$Mass,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\n# Interaction simple effects analysis\n# Divide the data into mass levels\ntrunk_flexion_15 = subset(trunk_flexion_ROM.l, Mass == \"15\")\ntrunk_flexion_30 = subset(trunk_flexion_ROM.l, Mass == \"30\")\n\n# Bonferroni for armour type\npairwise.t.test(trunk_flexion_15$trunk_flex_ROM,\n                trunk_flexion_15$Armour_type,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\npairwise.t.test(trunk_flexion_30$trunk_flex_ROM,\n                trunk_flexion_30$Armour_type,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\n\n# Post hoc shoulder FF ----------------------------------------------------\n\n## ANOVA only showed significant value for mass\n# Bonferroni for mass\npairwise.t.test(shoulder_FF_ROM.l$shoulder_FF_ROM,\n                shoulder_FF_ROM.l$Mass,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\n\n# Post hoc shoulder abduction ---------------------------------------------\n## ANOVA only showed significant value for armour type\n# Bonferroni for mass\npairwise.t.test(UUA_ROM.l$UUA_ROM,\n                UUA_ROM.l$Armour_type,\n                paired = TRUE,\n                p.adjust.method = \"bonferroni\")\n\nUUA_pARM2 = subset(UUA_ROM.l, Armour_type == \"pARM2\")\nUUA_TBAS = subset(UUA_ROM.l, Armour_type == \"TBAS\")\nUUA_pARM3 = subset(UUA_ROM.l, Armour_type == \"pARM3\")\n\nmean_pARM2 = mean(UUA_pARM2$UUA_ROM); sd_pARM2 = sd(UUA_pARM2$UUA_ROM)\nmean_TBAS = mean(UUA_TBAS$UUA_ROM); sd_TBAS = sd(UUA_TBAS$UUA_ROM)\nmean_pARM3 = mean(UUA_pARM3$UUA_ROM); sd_pARM3 = sd(UUA_pARM3$UUA_ROM)\n\n# Summary_SE function -----------------------------------------------------\n\n\n# Generate descriptive statistics\nlibrary(ggplot2)\n\n## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).\n##   data: a data frame.\n##   measurevar: the name of a column that contains the variable to be summariezed\n##   groupvars: a vector containing names of columns that contain grouping variables\n##   na.rm: a boolean that indicates whether to ignore NA's\n##   conf.interval: the percent range of the confidence interval (default is 95%)\nsummarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,\n                      conf.interval=.95, .drop=TRUE) {\n  library(plyr)\n  \n  # New version of length which can handle NA's: if na.rm==T, don't count them\n  length2 <- function (x, na.rm=FALSE) {\n    if (na.rm) sum(!is.na(x))\n    else       length(x)\n  }\n  \n  # This does the summary. For each group's data frame, return a vector with\n  # N, mean, and sd\n  datac <- ddply(data, groupvars, .drop=.drop,\n                 .fun = function(xx, col) {\n                   c(N    = length2(xx[[col]], na.rm=na.rm),\n                     mean = mean   (xx[[col]], na.rm=na.rm),\n                     sd   = sd     (xx[[col]], na.rm=na.rm)\n                   )\n                 },\n                 measurevar\n  )\n  \n  # Rename the \"mean\" column    \n  datac <- rename(datac, c(\"mean\" = measurevar))\n  \n  datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean\n  \n  # Confidence interval multiplier for standard error\n  # Calculate t-statistic for confidence interval: \n  # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1\n  ciMult <- qt(conf.interval/2 + .5, datac$N-1)\n  datac$ci <- datac$se * ciMult\n  \n  return(datac)\n}\n\n# Plot means ------------------------------------------------------\n\nsummary_hip_flex <- summarySE(data = hip_flexion_ROM.l, measurevar=\"hip_flex_ROM\", groupvars=c(\"Mass\",\"Armour_type\"))\nsummary_trunk_flex <- summarySE(data = trunk_flexion_ROM.l, measurevar=\"trunk_flex_ROM\", groupvars=c(\"Mass\",\"Armour_type\"))\nsummary_shoulder_FF <- summarySE(data = shoulder_FF_ROM.l, measurevar=\"shoulder_FF_ROM\", groupvars=c(\"Mass\",\"Armour_type\"))\nsummary_UUA <- summarySE(data = UUA_ROM.l, measurevar=\"UUA_ROM\", groupvars=c(\"Mass\",\"Armour_type\"))\n\n# Use armour_type as a factor rather than numeric\nsummary_hip_flex2 <- summary_hip_flex\nsummary_hip_flex2$Armour_type <- factor(summary_hip_flex2$Armour_type)\n\nsummary_trunk_flex2 <- summary_trunk_flex\nsummary_trunk_flex2$Armour_type <- factor(summary_trunk_flex2$Armour_type)\n\nsummary_shoulder_FF2 <- summary_shoulder_FF\nsummary_shoulder_FF2$Armour_type <- factor(summary_shoulder_FF2$Armour_type)\n\nsummary_UUA2 <- summary_UUA\nsummary_UUA2$Armour_type <- factor(summary_UUA2$Armour_type)\n\n# Plot with error bars represent standard error of the mean\n# Hip flexion\nplot_HF <- ggplot(summary_hip_flex2, aes(x=Armour_type, y=hip_flex_ROM, fill=Mass)) + \n  geom_bar(position=position_dodge(0.9), colour = \"black\", stat=\"identity\") +\n  geom_errorbar(aes(ymin=hip_flex_ROM-se, ymax=hip_flex_ROM+se),\n                width=.2,                    # Width of the error bars\n                position=position_dodge(0.9)) +\n  xlab(\"Armour type\") +\n  ylab(\"Range of motion (deg)\") +\n  ggtitle(\"A\") +\n  coord_cartesian(ylim=c(60,90)) +\n  scale_fill_manual(name=\"Mass\", # Legend label, use darker colors\n                    breaks=c(\"15\", \"30\"),\n                    labels=c(\"15 kg\", \"30 kg\"),\n                    values = c(\"#D5D5D5\",\"#545354\")) +\n  scale_y_continuous(breaks=0:9*10) + \n  theme_classic(base_size = 12, base_family = \"Calibri\") +\n  theme(legend.background = element_rect(), legend.position=c(0.7, 0.90), legend.direction = \"horizontal\",\n        panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(), axis.ticks.x = element_blank(), axis.line.y = element_line(colour = \"Black\"),\n        axis.line.x = element_line(colour = \"Black\"), axis.title.x  = element_blank(), axis.title.y = element_text(size=14), \n        plot.title = element_text(hjust = -0.01, vjust=1))\n\n# shoulder ff plot --------------------------------------------------------\n\n\n# Shoulder forward flexion\nplot_SFF <- ggplot(summary_shoulder_FF2, aes(x=Armour_type, y=shoulder_FF_ROM, fill=Mass)) + \n  geom_bar(position=position_dodge(0.9), colour = \"black\", stat=\"identity\") +\n  geom_errorbar(aes(ymin=shoulder_FF_ROM-se, ymax=shoulder_FF_ROM+se),\n                width=.2,                    # Width of the error bars\n                position=position_dodge(0.9)) +\n  xlab(\"Armour type\") +\n  ggtitle(\"C\") +\n  ylab(\"Range of motion (deg)\") +\n  coord_cartesian(ylim=c(110,150)) +\n  scale_fill_manual(name=\"Mass\", # Legend label, use darker colors\n                    breaks=c(\"15\", \"30\"),\n                    labels=c(\"15 kg\", \"30 kg\"),\n                    values = c(\"#D5D5D5\",\"#545354\")) +\n  scale_y_continuous(breaks=0:19*10) + \n  theme_classic(base_size = 12, base_family = \"Calibri\") +\n  theme(legend.background = element_rect(),\n        panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(), axis.ticks.x = element_blank(), axis.line.y = element_line(colour = \"Black\"),\n        axis.line.x = element_line(colour = \"Black\"), axis.title.y  = element_text(size=14), legend.position = \"None\", \n        axis.title.x  = element_blank(), plot.title = element_text(hjust = -0.01, vjust=2.12))\n\n# trunk flexion plot ------------------------------------------------------\n\n# Trunk flexion\nplot_TF <- ggplot(summary_trunk_flex2, aes(x=Armour_type, y=trunk_flex_ROM, fill=Mass)) + \n  geom_bar(position=position_dodge(0.9), colour = \"black\", stat=\"identity\") +\n  geom_errorbar(aes(ymin=trunk_flex_ROM-se, ymax=trunk_flex_ROM+se),\n                width=.2,                    # Width of the error bars\n                position=position_dodge(0.9)) +\n  xlab(\"Armour type\") +\n  ggtitle(\"B\") +\n  ylab(\"Range of motion (deg)\") +\n  coord_cartesian(ylim=c(60,100)) +\n  scale_fill_manual(name=\"Mass\", # Legend label, use darker colors\n                    breaks=c(\"15\", \"30\"),\n                    labels=c(\"15 kg\", \"30 kg\"),\n                    values = c(\"#D5D5D5\",\"#545354\")) +\n  scale_y_continuous(breaks=0:10*10) + \n  theme_classic(base_size = 12, base_family = \"Calibri\") +\n  theme(legend.background = element_rect(),\n        panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(), axis.ticks.x = element_blank(), axis.line.y = element_line(colour = \"Black\"),\n        axis.line.x = element_line(colour = \"Black\"), axis.title.y = element_blank(), legend.position = \"None\",\n        axis.title.x  = element_blank(), plot.title = element_text(hjust = -0.01, vjust=2.12))\n\n# shoulder abduction plot -------------------------------------------------\n\n# shoulder abduction\nplot_UUA <- ggplot(summary_UUA2, aes(x=Armour_type, y=UUA_ROM, fill=Mass)) + \n  geom_bar(position=position_dodge(0.9), colour = \"black\", stat=\"identity\") +\n  geom_errorbar(aes(ymin=UUA_ROM-se, ymax=UUA_ROM+se),\n                width=.2,                    # Width of the error bars\n                position=position_dodge(0.9)) +\n  xlab(\"Armour type\") +\n  ggtitle(\"D\") +\n  ylab(\"Range of motion (deg)\") +\n  coord_cartesian(ylim=c(120,170)) +\n  scale_fill_manual(name=\"Mass\", # Legend label, use darker colors\n                    breaks=c(\"15\", \"30\"),\n                    labels=c(\"15 kg\", \"30 kg\"),\n                    values = c(\"#D5D5D5\",\"#545354\")) +\n  scale_y_continuous(breaks=0:19*10) + \n  theme_classic(base_size = 12, base_family = \"Calibri\") +\n  theme(legend.background = element_rect(),\n        panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(), axis.ticks.x = element_blank(), axis.line.y = element_line(colour = \"Black\"),\n        axis.line.x = element_line(colour = \"Black\"), axis.title.y = element_blank(), legend.position = \"None\", \n        axis.title.x  = element_blank(), plot.title = element_text(hjust = -0.01, vjust=2.12))\n\n# Plot all on same figure\npng(file=\"ROM_summary.png\",width = 8, height = 5, units = 'in', res = 300)\nmultiplot(plot_HF, plot_SFF, plot_TF, plot_UUA, cols=2)\n\ndev.off()\n\n",
    "created" : 1476706616997.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "158|25|187|47|\n",
    "hash" : "2877658745",
    "id" : "414C4847",
    "lastKnownWriteTime" : 1478131128,
    "last_content_update" : 1478153438876,
    "path" : "~/Google Drive/LS_main_data_collection/R_databases/LS_ROM_data/Rom_summary_stats.R",
    "project_path" : "Rom_summary_stats.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}